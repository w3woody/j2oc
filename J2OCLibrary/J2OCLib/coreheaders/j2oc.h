/*	j2oc.h
 *
 *		Defines the various Objective C classes and global state that is used
 *	to manage the Java to Objective C system.
 */

#import <Foundation/Foundation.h>
#import "J2OCClass.h"
#import "J2OCRefArray.h"
#import "J2OCBooleanArray.h"
#import "J2OCCharArray.h"
#import "J2OCIntArray.h"
#import "J2OCByteArray.h"
#import "J2OCShortArray.h"
#import "J2OCLongArray.h"
#import "J2OCFloatArray.h"
#import "J2OCDoubleArray.h"

/************************************************************************/
/*																		*/
/*	Core Class Equivalencies											*/
/*																		*/
/************************************************************************/

/*
 *	These three classes are implemented as categories on top of the native
 *	Objective C classes. J2OCClass is defined below as a wrapper to a Class
 *	object--I know in theory I could create a bridge if I wanted to go through
 *	the difficulty, but right now I just want to get this off the ground.
 */

typedef J2OCClass java_lang_Class;
typedef NSObject java_lang_Object;
typedef NSString java_lang_String;

/************************************************************************/
/*																		*/
/*	Exception State Storage												*/
/*																		*/
/************************************************************************/

/*	GExceptState
 *
 *		Jump buffer used to store the stack state for unwinding during
 *	exception handling.
 */
 
extern jmp_buf GExceptState;

/*	GException
 *
 *		Reference to object thrown as part of exception
 */

extern id GException;


/************************************************************************/
/*																		*/
/*	Support Functions													*/
/*																		*/
/************************************************************************/

/*
 *	Generated by code generator
 */

extern int32_t j2oc_lcmp(int64_t left, int64_t right);
extern int32_t j2oc_fcmpg(double left, double right);
extern int32_t j2oc_fcmpl(double left, double right);
extern int32_t j2oc_fmod(double left, double right);
extern void j2oc_monitor_enter(id mobj);
extern void j2oc_monitor_exit(id mobj);

extern void j2oc_longjmp(jmp_buf env, int val);

/*
 *	Called by my classes
 */

extern NSString *j2oc_format(NSString *format,J2OCRefArray *args);
extern void j2oc_arraycopy(NSObject *src, int32_t srcOff, NSObject *dest, int32_t destOff, int32_t len);

/*
 *	Useful macros. This is useful when we're writing code that invokes the Java
 *	engine. Usage:
 *
 *		J2OC_TRY {
 *			... my code ...
 *		}
 *		J2OC_CATCH {
 *			... handle exception in GException
 *		}
 *
 *	Note that this macro does not push the stack frame but only sets up for
 *	an initial call into my Java engine. If you are building code that is called
 *	back from Java and that calls into Java, you should handle the stack frame
 *	in the way the compiler generates stack frames--see the docs for more info.
 */

#define J2OC_TRY		if (!setjump(GExceptState))						
						
#define J2OC_CATCH		else
