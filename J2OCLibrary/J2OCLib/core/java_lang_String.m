/*  java_lang_String.m
 *
 *      Autogenerated by j2oc (http://www.j2oc.com) at Mon Feb 15 20:13:09 PST 2010
 *
 *      Generated from class java/lang/String
 *      Do not change here; change in original class.
 */


// includes
#import <Foundation/Foundation.h>
#import "j2oc.h"
#import "java_lang_String.h"
#import "java_io_Serializable.h"
#import "java_io_UnsupportedEncodingException.h"
#import "java_lang_CharSequence.h"
#import "java_lang_Comparable.h"
#import "java_lang_Object.h"
#import "java_lang_String.h"
#import "java_lang_String_CaseInsensitiveComparator.h"
#import "java_lang_IndexOutOfBoundsException.h"
#import "java_lang_StringBuffer.h"
#import "java_lang_StringBuilder.h"
#import "java_lang_Character.h"

static java_util_Comparator * CASE_INSENSITIVE_ORDER_;
static NSDictionary *GPool;


@implementation NSString (category_java_lang_String)

/*
 *	Internal throw support
 */
 
+ (void)throwException
{
	java_lang_IndexOutOfBoundsException *ex = [[java_lang_IndexOutOfBoundsException alloc] init];
	[ex __init_java_lang_IndexOutOfBoundsException__];
	GException = [ex autorelease];
	j2oc_longjmp(GExceptState,1);
}


/*	-initJ
 *
 *		Autogenerated by our J2OC converter if we detect a 'new String' declaration
 *	in the code stream, this allows us to swap out an NSString for a NSMutableString
 *	object. Essentially, as far as the Objective C code is concerned, when you
 *	use initJ you will get something that looks externally like an NSString but
 *	whose contents can be replaced on the fly.
 *
 *		By doing this bit of black magic, it allows me to have a category
 *	override but swap in something other than an NSString object, yet have
 *	the system think we have an NSString that is interchangeable with the
 *	Java string object.
 */

- (id)initJ
{
	[self release];
	return [[NSMutableString alloc] init];
}

+ (java_util_Comparator *)CASE_INSENSITIVE_ORDER_
{
    return CASE_INSENSITIVE_ORDER_;
}

+ (void)setCASE_INSENSITIVE_ORDER_:(java_util_Comparator *)value
{
    [value retain];
    [CASE_INSENSITIVE_ORDER_ release];
    CASE_INSENSITIVE_ORDER_ = value;
}


/************************************************************************/
/*																		*/
/*	Initializers														*/
/*																		*/
/************************************************************************/

/** java/lang/String.<init> */
- (void)__init_java_lang_String__
{
	// Does nothing
    [(self) __init_java_lang_Object__];
    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___byte_ARRAYTYPE:(J2OCByteArray *)v1_a
{
    [(self) __init_java_lang_Object__];

	NSString *tmp = [[[NSString alloc] initWithBytes:[v1_a array] length:[v1_a arrayLength] encoding:NSUTF8StringEncoding] autorelease];
	[(NSMutableString *)self setString:tmp];

    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___byte_ARRAYTYPE_int_int:(J2OCByteArray *)v1_a :(int32_t)v2_i :(int32_t)v3_i
{
    [(self) __init_java_lang_Object__];

	if ((v2_i < 0) || (v2_i + v3_i > [v1_a arrayLength])) [NSString throwException];
	
	NSString *tmp = [[[NSString alloc] initWithBytes:[v1_a array]+v2_i length:v3_i encoding:NSUTF8StringEncoding] autorelease];
	[(NSMutableString *)self setString:tmp];

    return;
}

/** java/lang/String.<init> */
/* Note: we always use UTF-8 encoding */
- (void)__init_java_lang_String___byte_ARRAYTYPE_int_int_java_lang_String:(J2OCByteArray *)v1_a :(int32_t)v2_i :(int32_t)v3_i :(java_lang_String *)v4_a
{
	[self __init_java_lang_String___byte_ARRAYTYPE_int_int:v1_a :v2_i :v3_i];
    return;
}

/** java/lang/String.<init> */
/* Note: we always use UTF-8 encoding */
- (void)__init_java_lang_String___byte_ARRAYTYPE_java_lang_String:(J2OCByteArray *)v1_a :(java_lang_String *)v2_a
{
	[self __init_java_lang_String___byte_ARRAYTYPE:v1_a];
    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___char_ARRAYTYPE:(J2OCCharArray *)v1_a
{
    [(self) __init_java_lang_Object__];
	
	NSString *str = [NSString stringWithCharacters:[v1_a array] length:[v1_a arrayLength]];
	[(NSMutableString *)self setString:str];
	
    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___char_ARRAYTYPE_int_int:(J2OCCharArray *)v1_a :(int32_t)v2_i :(int32_t)v3_i
{
    [(self) __init_java_lang_Object__];

	if ((v2_i < 0) || (v2_i + v3_i > [v1_a arrayLength])) [NSString throwException];
	NSString *str = [NSString stringWithCharacters:[v1_a array] + v2_i length:v3_i];
	[(NSMutableString *)self setString:str];

    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___java_lang_String:(java_lang_String *)v1_a
{
    [(self) __init_java_lang_Object__];
	
	[(NSMutableString *)self setString:v1_a];
	
    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___java_lang_StringBuffer:(java_lang_StringBuffer *)v1_a
{
    [(self) __init_java_lang_Object__];
	
	J2OCCharArray *a = [v1_a shareValue_char_ARRAYTYPE__];
	NSString *str = [NSString stringWithCharacters:[a array] length:[v1_a length_int__]];
	[(NSMutableString *)self setString:str];
	
    return;
}

/** java/lang/String.<init> */
- (void)__init_java_lang_String___java_lang_StringBuilder:(java_lang_StringBuilder *)v1_a
{
    [(self) __init_java_lang_Object__];
	
	J2OCCharArray *a = [v1_a shareValue_char_ARRAYTYPE__];
	NSString *str = [NSString stringWithCharacters:[a array] length:[v1_a length_int__]];
	[(NSMutableString *)self setString:str];

    return;
}

/** java/lang/String.charAt */
- (unichar)charAt_char___int:(int32_t)v1_i
{
	return [self characterAtIndex:v1_i];
}

/** java/lang/String.compareToIgnoreCase */
- (int32_t)compareToIgnoreCase_int___java_lang_String:(java_lang_String *)v1_a
{
	return [self caseInsensitiveCompare:v1_a];
}

/** java/lang/String.compareTo */
- (int32_t)compareTo_int___java_lang_Object:(java_lang_Object *)v1_a
{
    int32_t r0_i;
    r0_i = [(self) compareTo_int___java_lang_String:((java_lang_String *)(v1_a))];
    return r0_i;
}

/** java/lang/String.compareTo */
- (int32_t)compareTo_int___java_lang_String:(java_lang_String *)v1_a
{
	return [self compare:v1_a];
}

/** java/lang/String.concat */
- (java_lang_String *)concat_java_lang_String___java_lang_String:(java_lang_String *)v1_a
{
	NSMutableString *str = [[[NSMutableString alloc] init] autorelease];
	[str appendString:self];
	[str appendString:v1_a];
	return str;
}

/** java/lang/String.contains */
- (BOOL)contains_boolean___java_lang_CharSequence:(java_lang_CharSequence *)v1_a
{
	// brute force method
	
	int i,j,len = [v1_a length_int__];
	j = [self length] - len;
	if (j < 0) return NO;
	while (j-- > 0) {
		for (i = 0; i < len; ++i) {
			if ([self characterAtIndex:i] != [v1_a charAt_char___int:i]) break;
		}
		if (i >= len) return YES;
	}
	return NO;
}

/** java/lang/String.contentEquals */
- (BOOL)contentEquals_boolean___java_lang_CharSequence:(java_lang_CharSequence *)v1_a
{
	int i,len = [v1_a length_int__];
	for (i = 0; i < len; ++i) {
		if ([self characterAtIndex:i] != [v1_a charAt_char___int:i]) return NO;
	}
	return YES;
}

/** java/lang/String.contentEquals */
- (BOOL)contentEquals_boolean___java_lang_StringBuffer:(java_lang_StringBuffer *)v1_a
{
	// StringBuffer implements CharSequence.
	return [self contentEquals_boolean___java_lang_CharSequence:(java_lang_CharSequence *)v1_a];
}

/** java/lang/String.copyValueOf */
+ (java_lang_String *)copyValueOf_java_lang_String___char_ARRAYTYPE:(J2OCCharArray *)v0_a
{
    id r0_a;
    id d1_a;
    id tmp0_a;
    d1_a = [[[java_lang_String alloc] init] autorelease];
    tmp0_a = d1_a;
    [(d1_a) __init_java_lang_String___char_ARRAYTYPE_int_int:v0_a :0 :[v0_a arrayLength]];
    r0_a = tmp0_a;
    return r0_a;
}

/** java/lang/String.copyValueOf */
+ (java_lang_String *)copyValueOf_java_lang_String___char_ARRAYTYPE_int_int:(J2OCCharArray *)v0_a :(int32_t)v1_i :(int32_t)v2_i
{
	if ((v1_i < 0) || (v1_i + v2_i > [v0_a arrayLength])) [NSString throwException];
	return [NSString stringWithCharacters:v1_i + [v0_a array] length:v2_i];
}

/** java/lang/String.endsWith */
- (BOOL)endsWith_boolean___java_lang_String:(java_lang_String *)v1_a
{
	return [self hasSuffix:v1_a];
}

/** java/lang/String.equalsIgnoreCase */
- (BOOL)equalsIgnoreCase_boolean___java_lang_String:(java_lang_String *)v1_a
{
	return 0 == [self caseInsensitiveCompare:v1_a];
}

/** java/lang/String.equals */
- (BOOL)equals_boolean___java_lang_Object:(java_lang_Object *)v1_a
{
	if (v1_a == nil) return false;
	if (![v1_a isKindOfClass:[NSString class]]) return false;
	return 0 == [self compare:(NSString *)v1_a];
}

/** java/lang/String.format */
+ (java_lang_String *)format_java_lang_String___java_lang_String_java_lang_Object_ARRAYTYPE:(java_lang_String *)v0_a :(J2OCRefArray *)v1_a
{
	return j2oc_format(v0_a,v1_a);
}

/** java/lang/String.getBytes */
- (J2OCByteArray *)getBytes_byte_ARRAYTYPE__
{
	// We always do UTF8
	int32_t len = [self lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
	int8_t *buf = malloc(sizeof(int8_t) * len);
	NSRange range;
	range.location = 0;
	range.length = [self length];
	[self getBytes:buf maxLength:len usedLength:nil encoding:NSUTF8StringEncoding 
			options:0 range:range remainingRange:nil];
	
	return [[[J2OCByteArray alloc] initArrayWithBytesNoCopy:buf length:len] autorelease];
}

/** java/lang/String.getBytes */
// Always does UTF8. Sorry.
- (J2OCByteArray *)getBytes_byte_ARRAYTYPE___java_lang_String:(java_lang_String *)v1_a
{
	return [self getBytes_byte_ARRAYTYPE__];
}

/** java/lang/String.getChars */
- (void)getChars___int_int_char_ARRAYTYPE_int:(int32_t)v1_i :(int32_t)v2_i :(J2OCCharArray *)v3_a :(int32_t)v4_i
{
	int alen = [v3_a arrayLength];
	
	if (v4_i + v2_i - v1_i > alen) [NSString throwException];
	NSRange range;
	range.location = v1_i;
	range.length = v2_i - v1_i;
	[self getCharacters:v4_i + [v3_a array] range:range];
}

/** java/lang/String.getValue */
- (J2OCCharArray *)getValue_char_ARRAYTYPE__
{
	return [self toCharArray_char_ARRAYTYPE__];
}

/** java/lang/String.hashCode */
- (int32_t)hashCode_int__
{
	return [self hash];
}

/** java/lang/String.indexOf */
- (int32_t)indexOf_int___int:(int32_t)v1_i
{
	return [self indexOf_int___int_int:v1_i :0];
}

/** java/lang/String.indexOf */
- (int32_t)indexOf_int___int_int:(int32_t)v1_i :(int32_t)v2_i
{
	NSRange crange;
	crange.location = v1_i;
	crange.length = 1;
	NSRange srange;
	srange.location = v2_i;
	srange.length = [self length_int__] - v2_i;
	
	NSRange result = [self rangeOfCharacterFromSet:[NSCharacterSet characterSetWithRange:crange] options:NSLiteralSearch range:srange];
	return result.location;
}

/** java/lang/String.indexOf */
- (int32_t)indexOf_int___java_lang_String:(java_lang_String *)v1_a
{
	return [self indexOf_int___java_lang_String_int:v1_a :0];
}

/** java/lang/String.indexOf */
- (int32_t)indexOf_int___java_lang_String_int:(java_lang_String *)v1_a :(int32_t)v2_i
{
	NSRange srange;
	srange.location = v2_i;
	srange.length = [self length_int__] - v2_i;
	
	NSRange range = [self rangeOfString:v1_a options:NSLiteralSearch range:srange];
	return range.location;
}

/** java/lang/String.<clinit> */
+ (void)initialize
{
    id d1_a;
    id tmp0_a;
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    d1_a = [[[java_lang_String_CaseInsensitiveComparator alloc] init] autorelease];
    tmp0_a = d1_a;
    [(d1_a) __init_java_lang_String_CaseInsensitiveComparator__];
    [java_lang_String setCASE_INSENSITIVE_ORDER_:tmp0_a];
	[pool release];
    return;
}

/** java/lang/String.intern */
- (java_lang_String *)intern_java_lang_String__
{
	// This creates a pool of strings
	if (GPool == nil) GPool = [[NSMutableDictionary alloc] init];
	
	NSString *val = [GPool valueForKey:self];
	if (val == nil) {
		[GPool setValue:self forKey:self];
		val = self;
	}
	return val;
}

/** java/lang/String.lastIndexOf */
- (int32_t)lastIndexOf_int___int:(int32_t)v1_i
{
	return [self lastIndexOf_int___int_int:v1_i :[self length_int__]];
}

/** java/lang/String.lastIndexOf */
- (int32_t)lastIndexOf_int___int_int:(int32_t)v1_i :(int32_t)v2_i
{
	NSRange crange;
	crange.location = v1_i;
	crange.length = 1;
	NSRange srange;
	srange.location = 0;
	srange.length = v2_i;
	
	NSRange result = [self rangeOfCharacterFromSet:[NSCharacterSet characterSetWithRange:crange] options:NSLiteralSearch | NSBackwardsSearch range:srange];
	return result.location;
}

/** java/lang/String.lastIndexOf */
- (int32_t)lastIndexOf_int___java_lang_String:(java_lang_String *)v1_a
{
	return [self lastIndexOf_int___java_lang_String_int:v1_a :[self length_int__]];
}

/** java/lang/String.lastIndexOf */
- (int32_t)lastIndexOf_int___java_lang_String_int:(java_lang_String *)v1_a :(int32_t)v2_i
{
	NSRange srange;
	srange.location = 0;
	srange.length = v2_i;
	
	NSRange range = [self rangeOfString:v1_a options:NSLiteralSearch | NSBackwardsSearch range:srange];
	return range.location;
}

/** java/lang/String.length */
- (int32_t)length_int__
{
	return [self length];
}

/** java/lang/String.regionMatches */
- (BOOL)regionMatches_boolean___boolean_int_java_lang_String_int_int:(BOOL)ignoreCase 
	:(int32_t)toffset :(java_lang_String *)other :(int32_t)ooffset :(int32_t)len
{
	int i,slen;
	if (toffset < 0) return NO;
	if (ooffset < 0) return NO;
	slen = [self length];
	if (toffset + len >= slen) return NO;
	if (ooffset + len >= slen) return NO;
	
	if (ignoreCase) {
		for (i = 0; i < len; ++i) {
			unichar cl = [java_lang_Character toLowerCase_char___char:[self charAt_char___int:i + toffset]];
			unichar cr = [java_lang_Character toLowerCase_char___char:[other charAt_char___int:i + toffset]];
			if (cl != cr) return NO;
		}
	} else {
		for (i = 0; i < len; ++i) {
			if ([self charAt_char___int:i + toffset] != [other charAt_char___int:i + ooffset]) return NO;
		}
	}
	return YES;
}

/** java/lang/String.regionMatches */
- (BOOL)regionMatches_boolean___int_java_lang_String_int_int:(int32_t)v1_i :(java_lang_String *)v2_a :(int32_t)v3_i :(int32_t)v4_i
{
	return [self regionMatches_boolean___boolean_int_java_lang_String_int_int:NO :v1_i :v2_a :v3_i :v4_i];
}

///** java/lang/String.replace */
//- (java_lang_String *)replace___char_char:(unichar)v1_i :(unichar)v2_i
//{
//#warning Unimplemented native code method
//}
//
///** java/lang/String.replace */
//- (java_lang_String *)replace___java_lang_CharSequence_java_lang_CharSequence:(java_lang_CharSequence *)v1_a :(java_lang_CharSequence *)v2_a
//{
//#warning Unimplemented native code method
//}

/** java/lang/String.startsWith */
- (BOOL)startsWith_boolean___java_lang_String:(java_lang_String *)v1_a
{
	return [self hasPrefix:v1_a];
}

/** java/lang/String.startsWith */
- (BOOL)startsWith_boolean___java_lang_String_int:(java_lang_String *)v1_a :(int32_t)v2_i
{
	int32_t len = v2_i + [self length];
	if (len > [v1_a length]) return NO;
	
	NSRange range;
	range.location = v2_i;
	range.length = [v1_a length];
	NSComparisonResult r = [self compare:v1_a options:NSLiteralSearch range:range];
	return (r == NSOrderedSame);
}

/** java/lang/String.subSequence */
- (java_lang_CharSequence *)subSequence_java_lang_CharSequence___int_int:(int32_t)v1_i :(int32_t)v2_i
{
	// leverage fact that string is a sequence
	return (java_lang_CharSequence *)[self substring_java_lang_String___int_int:v1_i :v2_i];
}

/** java/lang/String.substring */
- (java_lang_String *)substring_java_lang_String___int:(int32_t)v1_i
{
	return [self substringFromIndex:v1_i];
}

/** java/lang/String.substring */
- (java_lang_String *)substring_java_lang_String___int_int:(int32_t)v1_i :(int32_t)v2_i
{
	NSRange range;
	
	if ((v1_i < 0) || (v2_i > [self length])) [NSString throwException];
	range.location = v1_i;
	range.length = v2_i - v1_i;
	return [self substringWithRange:range];
}

/** java/lang/String.toCharArray */
- (J2OCCharArray *)toCharArray_char_ARRAYTYPE__
{
	unichar *buffer = (unichar *)malloc([self length] * sizeof(unichar));
	[self getCharacters:buffer];
	return [[[J2OCCharArray alloc] initArrayWithDataNoCopy:buffer length:[self length]] autorelease];
}

/** java/lang/String.toLowerCase */
- (java_lang_String *)toLowerCase_java_lang_String__
{
	return [self lowercaseString];
}

/** java/lang/String.toString */
- (java_lang_String *)toString_java_lang_String__
{
	return self;
}

/** java/lang/String.toUpperCase */
- (java_lang_String *)toUpperCase_java_lang_String__
{
	return [self uppercaseString];
}

/** java/lang/String.trim */
- (java_lang_String *)trim_java_lang_String__
{
	return [self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___boolean:(BOOL)v0_i
{
	if (v0_i) return @"true";
	return @"false";
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___char:(unichar)v0_i
{
	unichar a[1];
	a[0] = (unichar)v0_i;
	return [NSString stringWithCharacters:a length:1];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___char_ARRAYTYPE:(J2OCCharArray *)v0_a
{
	// We punt on this.
	return [self copyValueOf_java_lang_String___char_ARRAYTYPE:v0_a];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___char_ARRAYTYPE_int_int:(J2OCCharArray *)v0_a :(int32_t)v1_i :(int32_t)v2_i
{
	// We punt on this
	return [self copyValueOf_java_lang_String___char_ARRAYTYPE_int_int:v0_a :v1_i :v2_i];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___double:(double)v0_d
{
	return [NSString stringWithFormat:@"%f",v0_d];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___float:(float)v0_f
{
	return [NSString stringWithFormat:@"%f",v0_f];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___int:(int32_t)v0_i
{
	return [NSString stringWithFormat:@"%d",v0_i];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___java_lang_Object:(java_lang_Object *)v0_a
{
	return [v0_a toString_java_lang_String__];
}

/** java/lang/String.valueOf */
+ (java_lang_String *)valueOf_java_lang_String___long:(int64_t)v0_l
{
	return [NSString stringWithFormat:@"%qi",v0_l];
}


@end

